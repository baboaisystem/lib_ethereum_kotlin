variables:
  COMMIT_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  RELEASE_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest

stages:
  - build
  - bindings
  - test
  - analysis
  - deploy
  - release

.conanbuild:
  stage: build
  tags:
    - short-jobs
  script:
    - mkdir $BUILD
    - cd $BUILD
    - cmake $CONAN_OPTS -DTAG_VERSION=$CI_COMMIT_TAG -DCMAKE_BUILD_TYPE=Release ..
    - make
  variables:
    CONAN_OPTS: ""
    BUILD: "build"
  artifacts:
    paths:
      - $BUILD/bin
      - $BUILD/lib

gcc8:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: build
  tags:
    - short-jobs
  script:
    - mkdir x64_build
    - mkdir x64_jni
    - cd x64_build
    - cmake -DTAG_VERSION=$CI_COMMIT_TAG -DCMAKE_BUILD_TYPE=Release -DJAVA=true -DUSE_CURL=false ..
    - make in3_jni
    - cp lib/libin3_jni.so ../x64_jni/
    - rm -rf *
    - cmake -DTAG_VERSION=$CI_COMMIT_TAG -DCMAKE_BUILD_TYPE=Release -DJAVA=true -DBUILD_DOC=true ..
    - make
  artifacts:
    paths:
      - x64_jni
      - x64_build/bin
      - x64_build/lib
      - x64_build/c/docs/doc_doxygen
      - x64_build/java/docs/doc_doxygen

win_mingw:
  image: docker.slock.it/build-images/cmake:gcc7-mingw
  extends: .conanbuild
  variables:
    CONAN_OPTS: "-DLIBCURL_LINKTYPE=static -DJAVA=false"
    BUILD: "win_build"

win_jni:
  image: docker.slock.it/build-images/cmake:gcc7-mingw
  extends: .conanbuild
  variables:
    CONAN_OPTS: "-DUSE_CURL=false -DJAVA=true"
    BUILD: "win_jni"

arm7:
  image: docker.slock.it/build-images/cmake:gcc8-armv7
  extends: .conanbuild
  tags:
    - arm
  variables:
    CONAN_OPTS: "-DJAVA=false"
    BUILD: "arm7_build"

arm_jni:
  image: docker.slock.it/build-images/cmake:gcc8-armv7
  extends: .conanbuild
  tags:
    - arm
  variables:
    CONAN_OPTS: "-DJAVA=true -DUSE_CURL=false"
    BUILD: "arm_jni_build"

gcc8-x86:
  image: docker.slock.it/build-images/cmake:gcc8-x86
  extends: .conanbuild
  variables:
    CONAN_OPTS: "-DJAVA=true"
    BUILD: "x86_build"

gcc5:
  image: docker.slock.it/build-images/cmake:gcc5
  extends: .conanbuild

clang50:
  image: docker.slock.it/build-images/cmake:clang50
  extends: .conanbuild

clang10:
  image: docker.slock.it/build-images/cmake:clang10
  extends: .conanbuild

mac_os:
  stage: build
  script:
    - mkdir mac_build
    - mkdir mac_jni
    - cd mac_build
    - cmake -DTEST=true -DTAG_VERSION=$CI_COMMIT_TAG -DEVM_GAS=true -DCMAKE_BUILD_TYPE=Debug -DLIBCURL_TYPE=shared ..
    - make
    - ctest -V | tee ../mac_test_c.log | test/junit > ../mac_test_c.xml
    - rm -rf *
    - cmake -DTAG_VERSION=$CI_COMMIT_TAG  -DCMAKE_BUILD_TYPE=MINSIZEREL -DJAVA=true -DUSE_CURL=false -DUSE_SCRYPT=true ..
    - make in3_jni
    - cp lib/libin3_jni.dylib ../mac_jni/
    - rm -rf *
    - cmake -DTAG_VERSION=$CI_COMMIT_TAG  -DCMAKE_BUILD_TYPE=MINSIZEREL -DJAVA=true ..
    - make

  artifacts:
    reports:
      junit: mac_test_c.xml
    paths:
      - mac_jni
      - mac_build/c/docs
      - mac_build/java/docs
      - mac_build/lib
      - mac_build/bin
      - mac_test_c.xml
      - mac_test_c.log
  tags:
    - mac-mini-runner

wasm:
  image: docker.slock.it/build-images/cmake:clang10
  stage: bindings
  tags:
    - short-jobs
  script:
    - mkdir wasm_build_min
    - cd wasm_build_min
    - emconfigure cmake -DWASM=true -DWASM_EMBED=false -DTAG_VERSION=$CI_COMMIT_TAG -DTRANSPORTS=false -DIN3_LIB=false -DWASM_EMMALLOC=true  -DBUILD_DOC=false -DIN3API=false -DETH_BASIC=false -DETH_FULL=false -DUSE_CURL=false -DCMD=false -DCMAKE_BUILD_TYPE=MINSIZEREL ..
    - make -j8
    - mkdir ../wasm_build
    - cd ../wasm_build
    - emconfigure cmake -DWASM=true -DTAG_VERSION=$CI_COMMIT_TAG -DTRANSPORTS=false -DIN3_LIB=false -DBUILD_DOC=false -DIN3API=true -DUSE_CURL=false -DCMD=false -DCMAKE_BUILD_TYPE=MINSIZEREL ..
    - make -j8
    - cp ../wasm_build_min/bin/*.wasm bin/in3w_min.wasm
    - cp ../wasm_build_min/bin/*.wasm module/in3w_min.wasm

  artifacts:
    paths:
      - wasm_build/module
      - wasm_build/bin

asmjs:
  image: docker.slock.it/build-images/cmake:clang10
  stage: bindings
  tags:
    - short-jobs
  script:
    - mkdir asmjs_build
    - cd asmjs_build
    - emconfigure cmake -DWASM=true -DASMJS=true -DWASM_EMBED=true -DTAG_VERSION=$CI_COMMIT_TAG -DTRANSPORTS=false -DIN3_LIB=false -DBUILD_DOC=false -DIN3API=true -DUSE_CURL=false -DCMD=false -DCMAKE_BUILD_TYPE=MINSIZEREL ..
    - make -j8

  artifacts:
    paths:
      - asmjs_build/module
      - asmjs_build/bin

java:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: bindings
  tags:
    - short-jobs
  dependencies:
    - mac_os
    - win_jni
    - gcc8
    - arm_jni
  script:
    - mkdir java_build
    - cd java_build
    - mkdir -p ../java/src/in3/native/
    - cp ../mac_jni/libin3_jni.dylib ../java/src/in3/native/
    - cp ../win_jni/lib/libin3_jni.so ../java/src/in3/native/in3_jni.dll
    - cp ../x64_jni/libin3_jni.so ../java/src/in3/native/
    - cp ../arm_jni_build/lib/libin3_jni.so ../java/src/in3/native/libin3_jni_arm.so
    - cmake -DIN3_LIB=false -DJAVA_MULTI_LIBS=true -DCMAKE_BUILD_TYPE=Release -DJAVA=true -DBUILD_DOC=true ..
    - make in3j
  artifacts:
    paths:
      - java/src/in3/native/
      - java_build/lib

# ##### test ######

coverage:
  stage: analysis
  image: silkeh/clang:dev
  tags:
    - short-jobs
  dependencies:
    - java_linux
  script:
    - mkdir cov_build; cd cov_build
    - cmake -DIN3API=true -DIN3_LIB=false -DCMD=false -DUSE_CURL=false -DTEST=true -DCODE_COVERAGE=true -DUSE_SEGGER_RTT=false -DTRANSPORTS=false -DCMAKE_BUILD_TYPE=Debug ..
    - make -j8 &&  make ptest
    - ../scripts/lcov_report.sh | xargs llvm-cov report
    - ../scripts/lcov_report.sh | xargs llvm-cov show -show-line-counts-or-regions -output-dir=ccov/all-merged -format=html
    - ../scripts/lcov_report.sh | xargs llvm-cov export  -format=lcov  > ccov/all-merged/lcov.info
    - mkdir jcov
    - cp -r ../java/build/reports/jacoco/test cov_build
  artifacts:
    paths:
      - cov_build/ccov/all-merged

clangcheck:
  stage: analysis
  image: docker.slock.it/build-images/cmake:clang10
  allow_failure: false
  tags:
    - short-jobs
  script:
    - mkdir _build
    - cd _build
    - scan-build-10 cmake -DTAG_VERSION=$CI_COMMIT_TAG -DCMAKE_BUILD_TYPE=DEBUG -DIN3_SERVER=true ..
    - scan-build-10 --status-bugs --exclude ../c/src/third-party --force-analyze-debug-code -o ../report make
  artifacts:
    paths:
      - report

cppcheck:
  stage: analysis
  image: docker.slock.it/build-images/cmake:gcc-x86-static-analysis
  allow_failure: true
  tags:
    - short-jobs
  script:
    - mkdir _build
    - cd _build
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Release ..
    - cd ..
    - cppcheck  --project=_build/compile_commands.json -i/builds/in3/c/in3-core/c/test/unity -i/builds/in3/c/in3-core/c/src/third-party

valgrind:
  stage: analysis
  image: docker.slock.it/build-images/cmake:valgrind
  #  allow_failure: true
  tags:
    - short-jobs
  variables:
    VALGRIND_OPTS: "-v -q --error-exitcode=1 --leak-check=full --show-leak-kinds=definite --suppressions=suppress.valgrind"
  script:
    - mkdir _build
    - cd _build
    - cmake -DCMAKE_BUILD_TYPE=Release -DTEST=true -DDEBUG=false ..
    - make
    - printf "{\n  ignore_libcrypto_conditional_jump_errors\n  Memcheck:Leak\n  ...\n  obj:*/libcrypto.so.*\n}\n"  > suppress.valgrind
    - for f in test/test*; do valgrind $VALGRIND_OPTS $(pwd)/$f; done

test_c:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: test
  tags:
    - short-jobs
  script:
    - mkdir testbuild
    - cd testbuild
    - cmake -DTEST=true -DEVM_GAS=true -DCMAKE_BUILD_TYPE=Debug ..
    - make
    - make test
  artifacts:
    paths:
      - testbuild/test
      - Testing

#test_evm:
#  image: docker.slock.it/build-images/cmake:gcc8
#  stage: test
#  tags:
#    - short-jobs
#  script:
#    - mkdir testbuild
#    - cd testbuild
#    - cmake -DTEST=true -DEVM_GAS=true -DCMAKE_BUILD_TYPE=Debug ..
#    - make
#    - cd ../test/testdata/evm/GeneralStateTests
#    - IN3_SKIPTESTS=randomStatetest642,stZeroKnowledge,ecadd,returndatacopyPythonBug,Call1024PreCalls,recursiveCreateReturnValue,static_Call50000_sha256 ../../../../testbuild/test/vmrunner  */*.json || echo "\n ignoring failure .."
#    - cd ../vmTests
#    - ../../../../testbuild/test/vmrunner */*.json || echo "\n ignoring failure .."

test_android:
  image: cangol/android-gradle
  stage: test
  tags:
    - short-jobs
  script:
    - git clone https://github.com/slockit/in3-example-android.git
    - cd in3-example-android/app
    - cp -r ../../java/src/in3 src/main/java/
    - mv ../../c ../../java in3-c/
    - cd ..
    - ./gradlew build
  artifacts:
    paths:
      - in3-example-android/app/build/outputs/apk

test_wasm:
  image: docker.slock.it/build-images/node:10-alpine
  dependencies:
    - wasm
  stage: test
  tags:
    - short-jobs
  script:
    - mv wasm_build build
    - cd wasm/test
    - sh /prepare.sh
    - npm install
    - npm run test_report
  artifacts:
    reports:
      junit: wasm/test/mocha.xml

test_asmjs:
  image: docker.slock.it/build-images/node:10-alpine
  dependencies:
    - asmjs
  stage: test
  tags:
    - short-jobs
  script:
    - mv asmjs_build build
    - cd wasm/test
    - sh /prepare.sh
    - npm install
    - npm test

test_qemu:
  image: docker.io/zephyrprojectrtos/zephyr-build:v0.12
  stage: test
  script:
    - west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.0.0
    - export ZEPHYR_BASE=/builds/in3/c/in3-core
    - source /builds/in3/c/in3-core/zephyr/zephyr-env.sh
    - west build -b qemu_cortex_m3 c/test/qemu
    - ./scripts/qemu.sh 2> /dev/null

java_linux:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: test
  dependencies:
    - java
  script:
    - mv java_build build
    - cd java
    - ./gradlew test
  tags:
    - short-jobs
  artifacts:
    paths:
      - java/build/reports/jacoco/test
    reports:
      junit: java/build/test-results/test/TEST-*.xml

examples_linux:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: test
  dependencies:
    - gcc8
  script:
    - mv x64_build build
    - cd c/examples
    - ./build.sh
    - cd ../../java/examples
    - ./build.sh
  tags:
    - short-jobs

examples_arm:
  image: docker.slock.it/build-images/cmake:gcc8-armv7
  stage: test
  dependencies:
    - arm7
  script:
    - mv arm7_build build
    - cd c/examples
    - ./build.sh
  tags:
    - arm

examples_macos:
  stage: test
  dependencies:
    - mac_os
    - wasm
  script:
    - mv mac_build build
    - cd c/examples
    - ./build.sh
    - cd ../../java/examples
    - ./build.sh
    - cd ../..
    - mv build mac_build
    - mv wasm_build build
    - cd wasm/examples
    - ./build.sh
  tags:
    - mac-mini-runner

java_arm:
  image: armv7/armhf-java8
  dependencies:
    - java
  stage: test
  script:
    - mv java_build build
    - cd java
    - ./gradlew test
  tags:
    - arm
  artifacts:
    reports:
      junit: java/build/test-results/test/TEST-*.xml

java_macos:
  stage: test
  allow_failure: true
  dependencies:
    - java
  script:
    - mv java_build build
    - cd java; cp test/build_test.gradle build.gradle
    - ./gradlew test
  tags:
    - mac-mini-runner
#  artifacts:
#    reports:
#      junit: java/build/test-results/test/TEST-*.xml

##### local_docker_deploy_and_vulnerability_analysis #####

docker:
  stage: bindings
  tags:
    - short-jobs
  services:
    - docker:dind
  image: docker.slock.it/build-images/deployment
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $COMMIT_IMAGE_TAG .
    - docker tag $COMMIT_IMAGE_TAG $RELEASE_IMAGE_TAG
    - docker push $RELEASE_IMAGE_TAG
    - docker push $COMMIT_IMAGE_TAG

##### analyse #####

include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  stage: analysis
  tags:
    - short-jobs
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  variables:
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/security-products/codequality:latest"
    REPORT_STDOUT: STDOUT

format:
  stage: analysis
  image: docker.slock.it/build-images/cmake:clang10
  tags:
    - short-jobs
  script:
    - find c/src/core/ c/src/cmd/ c/src/api/ c/src/verifier/ c/src/transport/ java \( -name "*.c" -o -name "*.h" -o -name "*.java" \) | xargs clang-format-10 -i
    - git diff --patch --exit-code

cpd:
  stage: analysis
  image: rawdee/pmd
  tags:
    - short-jobs
  script:
    - cpd --minimum-tokens 180 --language cpp --exclude c/src/third-party --files c/src
    - cpd --minimum-tokens 150 --language java --files java/src
    - cpd --minimum-tokens 150 --language python --files python

vulnerabilities:
  stage: analysis
  tags:
    - short-jobs
  dependencies:
    - docker
  image: docker.slock.it/build-images/vulnerability-testing-tools
  script:
    - export TRIVY_AUTH_URL=$CI_REGISTRY
    - export TRIVY_USERNAME=gitlab-ci-token
    - export TRIVY_PASSWORD=$CI_JOB_TOKEN
    - trivy -f json -o vulnerability_analysis.json --exit-code 1 $COMMIT_IMAGE_TAG
  artifacts:
    paths:
      - vulnerability_analysis.json

metrics:
  stage: analysis
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  dependencies:
    - mac_os
    - gcc8
    - wasm
    - asmjs
    - java
  script:
    - echo "mac_cmd_size `stat -c %s mac_build/bin/in3` " > metrics.txt
    - echo "wasm_min_size `stat -c %s wasm_build/bin/in3w_min.wasm` " >> metrics.txt
    - echo "wasm_js_size `stat -c %s wasm_build/bin/in3.js` " >> metrics.txt
    - echo "asmjs_js_size `stat -c %s asmjs_build/bin/in3.js` " >> metrics.txt
    - echo "java_size `stat -c %s java_build/lib/in3.jar` " > metrics.txt
    - echo "gcc8_size `stat -c %s x64_build/bin/in3` " >> metrics.txt
    - echo "reported metrics"; cat metrics.txt
  artifacts:
    reports:
      metrics: metrics.txt

##### deploy #####

dockerhub-deploy:
  stage: deploy
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  tags:
    - short-jobs
  when: manual
  services:
    - docker:dind
  image: docker.slock.it/build-images/deployment
  before_script:
    - docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD} ${DOCKERHUB_REGISTRY}
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - export IMAGE_TAG="slockit/in3:$IMAGE_VERSION"
    - docker build -t $COMMIT_IMAGE_TAG .
    - docker tag $COMMIT_IMAGE_TAG $IMAGE_TAG
    - docker push $IMAGE_TAG
    - docker tag $IMAGE_TAG slockit/in3:latest
    - docker push slockit/in3:latest

wasm-slockit-npm:
  image: docker.slock.it/build-images/node:11-alpine
  stage: deploy
  tags:
    - short-jobs
  only: # deploy only on  semantic versions tags
    - /^v[0-9]*\.[0-9]*\.[0-9]*-?.*$/
  except:
    - branches
  dependencies:
    - wasm
  script:
    - sh /prepare.sh
    - cd wasm_build/module
    - npm --no-git-tag-version --allow-same-version -f version $CI_COMMIT_TAG
    - npm publish

wasm-public-npm:
  image: docker.slock.it/build-images/node:11-alpine
  stage: deploy
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - wasm
  script:
    - sh /prepare.sh
    - cd wasm_build/module
    - npm --no-git-tag-version --allow-same-version -f version $CI_COMMIT_TAG
    - npm publish --registry https://registry.npmjs.org

asmjs-slockit-npm:
  image: docker.slock.it/build-images/node:11-alpine
  stage: deploy
  tags:
    - short-jobs
  only: # deploy only on  semantic versions tags
    - /^v[0-9]*\.[0-9]*\.[0-9]*-?.*$/
  except:
    - branches
  dependencies:
    - asmjs
  script:
    - sh /prepare.sh
    - cd asmjs_build/module
    - npm --no-git-tag-version --allow-same-version -f version $CI_COMMIT_TAG
    - npm publish

asmjs-public-npm:
  image: docker.slock.it/build-images/node:11-alpine
  stage: deploy
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - asmjs
  script:
    - sh /prepare.sh
    - cd asmjs_build/module
    - npm --no-git-tag-version --allow-same-version -f version $CI_COMMIT_TAG
    - npm publish --registry https://registry.npmjs.org

readthedocs:
  image: docker.slock.it/build-images/doc:readthedocs
  stage: test
  tags:
    - short-jobs
  allow_failure: true
  dependencies:
    - gcc8
  script:
    - cd scripts
    - ./update_examples.sh
    - cd ..
    - export PRE_DOC=`cat wasm/docs/*.md`
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@git.slock.it/in3/doc.git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@git.slock.it/tools/generator.git
    - cd generator
    - npm i && npm run build
    - bin/slockit-doxygen ../x64_build/c/docs/doc_doxygen/xml "# API Reference C\n\n" >  ../doc/docs/api-c.md
    - bin/slockit-doxygen ../x64_build/java/docs/doc_doxygen/xml "# API Reference Java\n\n" java >  ../doc/docs/api-java.md
    - chmod 777 bin/*
    - cd ../wasm/src
    - npm i typedoc
    - node_modules/.bin/typedoc --includeDeclarations --ignoreCompilerErrors --readme none --target ES6 --mode 'modules' --excludeExternals --json doc.json in3.d.ts
    - cat doc.json | ../../generator/bin/slockit-docu in3.d slockit/in3-c/blob/master/wasm/src "$PRE_DOC" >  ../../doc/docs/api-wasm.md
    - cd ../../doc/docs && make html && make latexpdf && make text
  artifacts:
    paths:
      - doc/build

release_mac_and_wasm:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - mac_os
    - gcc8
    - readthedocs
    - wasm
    - asmjs
    - java
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-mac-wasm
    - cd in3-mac-wasm
    - cp -r ../mac_build/bin .
    - cp -r ../mac_build/lib .
    - cp -r ../c  ../java ../CMakeLists.txt ../python ../wasm ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp -r ../wasm_build/module wasm/release-wasm
    - cp -r ../asmjs_build/module wasm/release-asmjs
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_mac.tar.gz in3-mac-wasm/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_mac.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_mac.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - ghr -u slockIt -r in3-c $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_mac.tar.gz
    - tar -zcv --exclude=in3-mac-wasm/python --exclude=in3-mac-wasm/java --exclude=in3-mac-wasm/bin --exclude=in3-mac-wasm/lib --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_wasm.tar.gz in3-mac-wasm/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_wasm.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_wasm.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "Mac release:" $IPFS_HASH >> in3-mac-wasm/mac_release_ipfs_hash.txt
    - ghr -u slockIt -r in3-c $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_wasm.tar.gz
    - cd in3-mac-wasm
  artifacts:
    paths:
      - in3-mac-wasm

release_x64:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  dependencies:
    - gcc8
    - readthedocs
    - wasm
    - asmjs
    - java
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-x64
    - cd in3-x64
    - cp -r ../x64_build/bin .
    - cp -r ../x64_build/lib .
    - cp -r ../c  ../java ../CMakeLists.txt ../python ../wasm ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp -r ../wasm_build/module wasm/release-wasm
    - cp -r ../asmjs_build/module wasm/release-asmjs
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_x64.tar.gz in3-x64/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_x64.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_mac.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "x64 release:" $IPFS_HASH >> in3-x64/x64_release_ipfs_hash.txt
    - ghr -u slockIt -r in3-c $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_x64.tar.gz
    - cd in3-x64
  artifacts:
    paths:
      - in3-x64

release_x86:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - gcc8
    - gcc8-x86
    - readthedocs
    - wasm
    - asmjs
    - java
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-x86
    - cd in3-x86
    - cp -r ../x86_build/bin .
    - cp -r ../x86_build/lib .
    - cp -r ../c  ../java ../CMakeLists.txt ../python ../wasm ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp -r ../wasm_build/module wasm/release-wasm
    - cp -r ../asmjs_build/module wasm/release-asmjs
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_x86.tar.gz in3-x86/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_x86.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_x86.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "x86 release:" $IPFS_HASH >> in3-x86/x86_release_ipfs_hash.txt
    - ghr -u slockIt -r in3-c $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_x86.tar.gz
    - cd in3-x86
  artifacts:
    paths:
      - in3-x86

release_arm7:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - gcc8
    - arm7
    - readthedocs
    - wasm
    - asmjs
    - java
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-arm7
    - cd in3-arm7
    - cp -r ../arm7_build/bin .
    - cp -r ../arm7_build/lib .
    - cp -r ../c  ../java ../CMakeLists.txt ../python ../wasm ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp -r ../wasm_build/module wasm/release-wasm
    - cp -r ../asmjs_build/module wasm/release-asmjs
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_arm7.tar.gz in3-arm7/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_arm7.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_arm7.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "arm7 release:" $IPFS_HASH >> in3-arm7/arm7_release_ipfs_hash.txt
    - ghr -u slockIt -r in3-c $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_arm7.tar.gz
    - cd in3-arm7
  artifacts:
    paths:
      - in3-arm7

release_win:
  stage: deploy
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - gcc8
    - win_mingw
    - readthedocs
    - wasm
    - asmjs
    - java
  script:
    - export IMAGE_VERSION=$(echo ${CI_COMMIT_TAG} | grep -E '\d+.*' -o)
    - mkdir in3-win
    - cd in3-win
    - cp -r ../win_build/bin .
    - cp -r ../win_build/lib .
    - mv bin/in3 bin/in3.exe
    - mv bin/rlp bin/rlp.exe
    - mv bin/json bin/json.exe
    - mv lib/libin3.so lib/in3.dll
    - cp -r ../c  ../java ../CMakeLists.txt ../python ../wasm ../README.md  ../LICENSE ../LICENSE.AGPL .
    - cp -r ../doc/build doc
    - cp -r ../wasm_build/module wasm/release-wasm
    - cp -r ../asmjs_build/module wasm/release-asmjs
    - cp ../java_build/lib/in3.jar lib/in3.jar
    - cd ..
    - tar -zcv  --exclude=*cmake* -f in3_${CI_COMMIT_TAG}_windows.tar.gz in3-win/
    - IPFS_RESPONSE=$(curl -X POST https://api.pinata.cloud/pinning/pinFileToIPFS -H 'Content-Type:multipart/form-data' -H 'pinata_api_key:'"$PINATA_API_KEY" -H 'pinata_secret_api_key:'"$PINATA_SECRET_API_KEY" -F file=@in3_${CI_COMMIT_TAG}_windows.tar.gz -F 'pinataMetadata={"name":"in3_'${CI_COMMIT_TAG}'_windows.tar.gz","keyValues":{"version":"${CI_COMMIT_TAG}"}}' -F 'pinataOptions={"cidVersion":0}')
    - "IPFS_HASH=$(echo $IPFS_RESPONSE | sed -e 's/[{}]/''/g' | awk -v RS=',' -F: '/IpfsHash/ {print $2}')"
    - echo "windows release:" $IPFS_HASH >> in3-win/win_release_ipfs_hash.txt
    - ghr -u slockIt -r in3-c $CI_COMMIT_TAG in3_${CI_COMMIT_TAG}_windows.tar.gz
    - cd in3-win
  artifacts:
    paths:
      - in3-win

release_maven:
  stage: deploy
  image: docker.slock.it/build-images/maven-deployment-image:latest
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - java
  script:
    - touch settings.xml
    - echo $MAVEN_SETTINGS > settings.xml
    - mvn -s settings.xml deploy:deploy-file -DgroupId=it.slock  -DartifactId=in3 -Dversion=$CI_COMMIT_TAG  -Dpackaging=jar -Dfile=java_build/lib/in3.jar  -DrepositoryId=github -Durl=https://maven.pkg.github.com/slockit/in3-c

release_pip:
  stage: deploy
  image: docker.slock.it/build-images/python-dev-image:latest
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  dependencies:
    - mac_os
  script:
    - rm -rf python/in3/bind/slibs/
    - mkdir python/in3/bind/slibs/
    - cp mac_build/lib/libin3.dylib python/in3/bind/slibs/.
    - export version=${CI_COMMIT_TAG}
    - export download_url=https://github.com/slockit/in3-c/releases/download/${CI_COMMIT_TAG}/in3_${CI_COMMIT_TAG}_mac.tar.gz
    - cd python
    - cp $pypirc ~/.pypirc
    - ./publish.sh
  artifacts:
    paths:
      - in3-pip

pages:
  stage: deploy
  tags:
    - arm
  only:
    refs:
      - develop
  dependencies:
    - arm7
    - readthedocs
    - coverage
    - clangcheck
    - vulnerabilities
    - java_linux
  script:
    - mkdir -p public/lib
    - tar -zcvf libFiles_$CI_COMMIT_SHORT_SHA.tar.gz arm7_build/lib
    - cp libFiles_$CI_COMMIT_SHORT_SHA.tar.gz public/lib
    - echo Grab file at BASE_PAGES_URL/lib/libFiles_$CI_COMMIT_SHORT_SHA.tar.gz
    - cp -r cov_build/ccov/all-merged public/coverage
    - cp -r report/* public/code_analysis
    - cp -r doc/build public/rtd
    - cp -r vulnerability_analysis.json public/vulnerability_analysis.json
    - cp -r java/build/reports/jacoco/test/html    public/coverage_java
    - echo "<html><body><h1>Incubed report for last build</h1><ul><li><a href='rtd/html/index.html'>Read the docs(html)</a></li><li><a href='rtd/latex/Incubed.pdf'>Read the docs(pdf)</a></li><li><a href='code_analysis/index.html'>Code Analysis</a></li><li><a href='vulnerability_analysis.json'>Vulnerability Analysis</a></li><li><a href='coverage/index.html'>Code Coverage C</a></li><li><a href='coverage_java/index.html'>Code Coverage JAVA</a></li></ul></body></html>" > public/index.html
  artifacts:
    paths:
      - public

.debian_package_deploy_template_in3:
  image: docker.slock.it/build-images/cmake:gcc8-with-debian-deps
  stage: deploy
  tags:
    - short-jobs
  dependencies:
    - test_c
    - java_arm
    - examples_arm
    - examples_linux
    - examples_macos
    - java_linux
    - java_macos
    - readthedocs
  when: manual
  script:
    - mv scripts/debian .
    - mv debian/changelog-in3 debian/changelog
    - mv debian/control-in3 debian/control
    - mv debian/rules-in3 debian/rules
    - rm -rf debian/*-dev
    - echo "" >> debian/changelog
    - echo "in3 (${VERSION:1}~${DISTRO}) ${DISTRO}; urgency=medium" >> debian/changelog
    - echo "" >> debian/changelog
    - echo "  * Check https://github.com/slockit/in3 for changelog " >> debian/changelog
    - echo "" >> debian/changelog
    - echo  " -- devops_slock.it <devops@slock.it> " $(date -R)  >> debian/changelog
    - echo "" >> debian/changelog
    - cat debian/changelog
    - mkdir ~/.gnupg && chmod 700 ~/.gnupg
    - echo -e "use-agent\npinentry-mode loopback" > ~/.gnupg/gpg.conf
    - echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
    - gpg --no-tty --batch --import --allow-secret-key-import "$PGP_KEY_ASC"
    - debuild -S -sa -us -uc
    - cd ..
    - debsign -p"gpg --batch --yes --no-tty --passphrase ${PGP_PASSPHRASE}" -S -kB4179604561E56D1 in3_${VERSION:1}~${DISTRO}_source.changes
    - dput ppa:devops-slock-it/in3 in3_${VERSION:1}~${DISTRO}_source.changes

debian_package_deploy_bionic:
  extends:
    - .debian_package_deploy_template_in3
  variables:
    DISTRO: "bionic"
    VERSION: $CI_COMMIT_TAG
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches

debian_package_deploy_disco:
  extends:
    - .debian_package_deploy_template_in3
  variables:
    DISTRO: "disco"
    VERSION: $CI_COMMIT_TAG
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches

.debian_package_deploy_template_in3_dev:
  image: docker.slock.it/build-images/cmake:gcc8-with-debian-deps
  stage: deploy
  tags:
    - short-jobs
  dependencies:
    - test_c
    - java_arm
    - examples_arm
    - examples_linux
    - examples_macos
    - java_linux
    - java_macos
    - readthedocs
  when: manual
  script:
    - mv scripts/debian .
    - mv debian/changelog-dev debian/changelog
    - mv debian/control-dev debian/control
    - mv debian/rules-dev debian/rules
    - rm -rf debian/*-in3
    - echo "" >> debian/changelog
    - echo "in3-dev (${VERSION:1}~${DISTRO}) ${DISTRO}; urgency=medium" >> debian/changelog
    - echo "" >> debian/changelog
    - echo "  * Check https://github.com/slockit/in3 for changelog " >> debian/changelog
    - echo "" >> debian/changelog
    - echo  " -- devops_slock.it <devops@slock.it> " $(date -R)  >> debian/changelog
    - echo "" >> debian/changelog
    - cat debian/changelog
    - mkdir ~/.gnupg && chmod 700 ~/.gnupg
    - echo -e "use-agent\npinentry-mode loopback" > ~/.gnupg/gpg.conf
    - echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
    - gpg --no-tty --batch --import --allow-secret-key-import "$PGP_KEY_ASC"
    - debuild -S -sa -us -uc
    - cd ..
    - debsign -p"gpg --batch --yes --no-tty --passphrase ${PGP_PASSPHRASE}" -S -kB4179604561E56D1 in3-dev_${VERSION:1}~${DISTRO}_source.changes
    - dput ppa:devops-slock-it/in3 in3-dev_${VERSION:1}~${DISTRO}_source.changes

debian_dev_package_deploy_bionic:
  extends:
    - .debian_package_deploy_template_in3_dev
  variables:
    DISTRO: "bionic"
    VERSION: $CI_COMMIT_TAG
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches

debian__dev_package_deploy_disco:
  extends:
    - .debian_package_deploy_template_in3_dev
  variables:
    DISTRO: "disco"
    VERSION: $CI_COMMIT_TAG
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches

brew_release:
  stage: release
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - mac_os
    - release_mac_and_wasm
  before_script:
    - git config --global user.name "${GITHUB_USER_NAME}"
    - git config --global user.email "${GITHUB_USER_EMAIL}"
  script:
    - git clone https://github.com/slockit/homebrew-in3.git
    - cd homebrew-in3
    - sed '4s/.*/url "https:\/\/github.com\/slockit\/in3-c\/releases\/download\/'"${CI_COMMIT_TAG}"'\/in3_'"${CI_COMMIT_TAG}"'_mac.tar.gz"/' in3.rb > in3.rb.tmp && mv in3.rb.tmp in3.rb
    - curl -jksSL -o /tmp/mac.tar.gz  https://github.com/slockit/in3-c/releases/download/${CI_COMMIT_TAG}/in3_${CI_COMMIT_TAG}_mac.tar.gz
    - export sha256_hash=$(sha256sum /tmp/mac.tar.gz | awk '{ print $1 }')
    - sed -e '5s/.*/sha256 '"\"$sha256_hash"\"'/' in3.rb > in3.rb.tmp && mv in3.rb.tmp in3.rb
    - git add in3.rb
    - git commit -m "updated version and hash"
    - git push https://${GITHUB_USER_NAME}:${GITHUB_TOKEN}@github.com/slockit/homebrew-in3.git --all

github_body_release:
  stage: release
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/
  except:
    - branches
  when: manual
  dependencies:
    - release_mac_and_wasm
    - release_x64
    - release_x86
    - release_arm7
    - release_win
  script:
    - cat in3-mac-wasm/mac_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - cat in3-x64/x64_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - cat in3-x86/x86_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - cat in3-arm7/arm7_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - cat in3-win/win_release_ipfs_hash.txt >> release_ipfs_hash.txt
    - ghr -u slockIt -r in3-c -b "$(cat release_ipfs_hash.txt)" $CI_COMMIT_TAG release_ipfs_hash.txt
